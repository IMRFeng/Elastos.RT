#!/bin/bash

# Exit immediately if a subsequent command exits with a non-zero status.
set -e

THIS_SCRIPT=$(basename $0)
usage()
{
    cat << EOF

Deploy Eco targets to a directory

Usage: ${THIS_SCRIPT} [options]

Options:
  -h, --help
      Print this message

  -m, --module-name <MODULE_NAME>
      Indicate module name

  -o, --output-dir <OUTPUT_DIR>
      "OUTPUT_DIR/elastos" is the location where the eco targets will be placed
      The default output directory is "\$XDK_ROOT/SDK/\$XDK_TARGET_PLATFORM/elastos"

  -s, --lib-subdir <LIB_SUBDIR>
      "LIB_SUBDIR" is the subdirectory inside the "elastos/libs".
      It's convenient to add "armeabi-v7a" subdirectory for some platform.
EOF

}

# Deafult output directory
OUTPUT_DIR=$XDK_ROOT/SDK/$XDK_TARGET_PLATFORM
LIB_SUBDIR=.

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
        usage
        exit 0
        ;;
    -m|--module-name)
        MODULE_NAME="$2"
        shift # past argument
        shift # past value
        ;;
    -o|--output-dir)
        OUTPUT_DIR="$2"
        shift # past argument
        shift # past value
        ;;
    -s|--lib-subdir)
        LIB_SUBDIR="$2"
        shift # past argument
        shift # past value
        ;;
    *)    # unknown option
        usage
        exit 1
        ;;
esac
done

if [ "$XDK_ROOT" = "" ] || [ "$XDK_TARGETS" = "" ]; then
    echo "ERROR: Please \"source Elastos.RT/Setup/SetEnv.sh\" to enter one of the building environment."
    echo
    exit 1
fi

if [ ! -d "$XDK_TARGETS" ]; then
    echo "ERROR: Please build the Elastos Runtime project before calling \"exporteco\"."
    echo
    exit 1
fi

if [ "$MODULE_NAME" = "" ]; then
    echo "ERROR: Please input module name by -m MODULE_NAME."
    echo
    exit 1
fi

ELASTOS_SDK_PATH=$OUTPUT_DIR/elastos

SDK_INCLUDE_PATH=$ELASTOS_SDK_PATH/include
SDK_LIBS_PATH=$ELASTOS_SDK_PATH/libs

mkdir -p "$ELASTOS_SDK_PATH"
mkdir -p "$SDK_INCLUDE_PATH"
mkdir -p "$SDK_LIBS_PATH/$LIB_SUBDIR"

echo "Exporting Eco targets to $(cd $ELASTOS_SDK_PATH && pwd) ..."

copy_library()
{
    name=$1
    from_dir=$2
    to_dir=$3

    if [ -f $from_dir/lib$name.so ]; then
        echo "Copying lib$name.so ..."
        cp $from_dir/lib$name.so $to_dir
    elif [ -f $from_dir/$name.eco ]; then
        echo "Copying lib$name.eco ..."
        cp $from_dir/$name.eco $to_dir
    elif [ -f $from_dir/lib$name.dylib ]; then
        echo "Copying lib$name.dylib ..."
        cp $from_dir/lib$name.dylib $to_dir
    elif [ -f $from_dir/lib$name.a ]; then
        echo "Copying lib$name.a ..."
        cp $from_dir/lib$name.a $to_dir
    else
        echo "WARNING: Library \"$name\" not found."
    fi
}

copy_inc()
{
    local XDK_EMAKE_DIR=${PWD/$XDK_SOURCE_PATH/}
    if [ "$XDK_EMAKE_DIR" == "$PWD" ]; then
        echo "Error: Can't export eco here. Please go to the module source directory."
        exit 1
    fi
    echo "Copying $MODULE_NAME.h ..."
    cp $XDK_USER_OBJ/$XDK_BUILD_KIND/mirror$XDK_EMAKE_DIR/$MODULE_NAME.h $SDK_INCLUDE_PATH
}

#cp include file to sdk path
copy_inc

copy_library $MODULE_NAME $XDK_TARGETS $SDK_LIBS_PATH/$LIB_SUBDIR

echo "Done"
