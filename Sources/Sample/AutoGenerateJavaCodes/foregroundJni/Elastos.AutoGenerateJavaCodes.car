//=========================================================================
// Copyright (C) 2018 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary");
    importlib("Elastos.HelloCarDemo");

    interface ITestCar2 {
        SetInt2(
            [in] Int32 value);

        Update(
            [in] String value1,
            [in] String value2,
            [in] String value3,
            [out] String* value);

        Test1(
            [in] String name,
            [in] ArrayOf<Int32> array);

        Test2(
            [in] ArrayOf<String> strArray,
            [in] ArrayOf<Int32> intArray);

        Test3(
            [in] Int32 i,
            [out, callee] ArrayOf<String>* strArray);

        Test4();

        Test5(
            [out] String* str);

        Test6(
            [in] Int32 i,
            [in] String str,
            [out, callee] ArrayOf<Float>* floatArray);
    }

    interface ITestCar {
        SetInt(
            [in] Int32 value);

        GetInt(
            [out] Int32* value);

        SetString(
            [in] String value);

        GetString(
            [out] String* value);

        Normal();

        Test1(
            [in] Int32 value1,
            [in] Boolean value2,
            [in] Float value3,
            [in] Double value4,
            [in] Int64 value5,
            [in] Byte value6,
            [in] Char32 value7,
            [in] String value8);

        Test2(
            [in] Int32 value1,
            [in] Boolean value2,
            [in] Float value3,
            [in] Double value4,
            [in] Int64 value5,
            [in] Byte value6,
            [in] Char32 value7,
            [in] String value8,
            [in] String value9,
            [in] String value10,
            [out] Int32* result);

        Test7(
            [in] IHelloCar* animal);

        Test8(
            [out] IHelloCar** animal);

        Test9(
            [in] ArrayOf<ICarrier*> carriers);

        Test10(
            [out, callee] ArrayOf<ICarrier*>* carriers);
    }

    class CTestCar {
        constructor(
            [in] ArrayOf<Double> dArray,
            [in] ArrayOf<String> sArray);

        constructor(
            [in] IServiceManager* sm,
            [in] ICarrier* carrier);

        interface ITestCar;
    }

    singleton class CSingletonTest {
        constructor();

        interface ITestCar2;
    }
}
