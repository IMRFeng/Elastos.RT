$;;=========================================================================
$;; Copyright (C) 2018 The Elastos Open Source Project
$;;
$;; Licensed under the Apache License, Version 2.0 (the "License");
$;; you may not use this file except in compliance with the License.
$;; You may obtain a copy of the License at
$;;
$;;      http://www.apache.org/licenses/LICENSE-2.0
$;;
$;; Unless required by applicable law or agreed to in writing, software
$;; distributed under the License is distributed on an "AS IS" BASIS,
$;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
$;; See the License for the specific language governing permissions and
$;; limitations under the License.
$;;=========================================================================
$
$INPUT class
$OUTPUT "${name}.h"
$

#ifndef __${Upper(name)}_H__
#define __${Upper(name)}_H__

#include "_${fullname}.h"
#include "elastos/core/Object.h"
#include <jni.h>

${ClassNamespaceBegin(class)}
$IF type is not "generic"
CarClass(${name})
    , public Object
$WITH all interfaces DO
$   IF attrib is not "callback" and attrib is not "callbacksink" and attrib is not "clsobj" and attrib is not "filter" and name is not "IRegime" and name is not "IObject" and name is not "ISynchronize" and name is not "IWeakReferenceSource" and name is not "IThread" and name is not "IRunnable"
    , public ${interface.name}
$   END IF
$END DO
{
public:
    CAR_OBJECT_DECL()

    CAR_INTERFACE_DECL()

    virtual ~${class.name}()
    {
        GetEnv()->DeleteGlobalRef(mObj);
        Detach();
    }

$WITH all interfaces DO
$   IF attrib is not "callback" and attrib is not "callbacksink" and attrib is not "clsobj" and attrib is not "filter" and name is not "IRegime" and name is not "IObject" and name is not "ISynchronize" and name is not "IWeakReferenceSource" and name is not "IThread"
$       WITH all parents_and_me DO
$       WITH all methods DO
$           IF interface.attrib is "inherited" and interface.name is not "IAppletMain"
$               WITH all supers DO
$                   IF super is last
    // inherits from ${super.name}, implement to override ${super.name}::${method.name}
$                   END IF ;; is last
$               END DO ;; all supers
    // $^
$           ELSE ;; is "inherited" is not "IAppletMain"
    $^
$           END IF ;; is "inherited" is not "IAppletMain"
$    IF type is "ECode"
CARAPI ${name}($^
$    ELSE
CARAPI_(${type}) ${name}($^
$    END IF
$
$    WITH all parameters DO

$   IF interface.attrib is "inherited" and interface.name is not "IAppletMain"
    // $^
$   ELSE ;; is "inherited" is not "IAppletMain"
    $^
$   END IF ;; is "inherited" is not "IAppletMain"
    /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$      IF parameter is not last
,$^
$      END IF
$    END DO ;; all parameters
);$^


$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is not "callback" and not "callbacksink" and not "clsobj" and not "filter"
$
$   IF attrib is "callbacksink"
$       WITH all parents_and_me DO
$       WITH all methods DO
    CARAPI On${name}(
        /* [in] */ IInterface * pSender$^
$    WITH all parameters DO
,$^
        /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$    END DO ;; all parameters
);

$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is "callbacksink"
$
$   IF attrib is "delegatesink"
$       WITH all parents_and_me DO
$       WITH all methods DO
    CARAPI Do${name}(
        /* [in] */ IInterface * pSender$^
$    WITH all parameters DO
,$^
        /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$    END DO ;; all parameters
);

$       END DO ;; all methods
$       END DO ;; parents_and_me
$   END IF ;; is "delegatesink"
$END DO ;; all interfaces
$
$IF class.attrib is not "hasTrivialCtor"
$  WITH all interfaces DO
$    IF attrib is "clsobj"
$      WITH all methods DO
$        IF type is "ECode"
    CARAPI constructor($^
$        ELSE
    CARAPI_(${type}) constructor($^
$        END IF
$
$        WITH all parameters DO
$          IF parameter is not last
$            IF parameter is not first
,$^
$            END IF

        /* [${attrib}] */ ${type} ${PrefixingNameByName(parameter)}$^
$          END IF
$        END DO ;; all parameters
);

$      END DO ;; all methods
$
$    END IF ;; clsobj
$  END DO ;; all interfaces
$END IF;;
private:
    JNIEnv* GetEnv();
    void Detach();

private:
    // TODO: Add your private member variables here.
    JavaVM* mJvm;
    jobject mObj;
};

$END IF ;; end of generic IF
${ClassNamespaceEnd(class)}
#endif // __${Upper(name)}_H__
$
$END OUTPUT
