//=========================================================================
// Copyright (C) 2018 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary");


    interface ISubWalletCallback {
        OnTransactionStatusChanged (
            [in] String txid,
            [in] String status,
            [in] String desc,
            [in] Int32 confirms);
    }

    interface ISubWallet {
        GetBalanceInfo (
            [out] String* balanceInfoJson);

        GetBalance (
            [out] Int64* balance);

        GetBalanceWithAddress (
            [in] String address,
            [out] Int64* balance);

        CreateAddress (
            [out] String* address);

        CreateMultiSignAddress (
            [in] String multiPublicKeyJson,
            [in] Int32 totalSignNum,
            [in] Int32 requiredSignNum,
            [out] String* multiSignAddress);

        GenerateMultiSignTransaction (
            [in] String fromAddress,
            [in] String toAddress,
            [in] Double amount,
            [in] Double fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* transactionMsg);

        SendRawTransaction (
            [in] String transactionJson,
            [in] String sign,
            [out] String* txid);

        GetAddressesCount (
        	[out] Int32 * count);

        GetAllAddress (
            [in] Int32 start,
            [in] Int32 count,
            [out] String* addressListJson);

        AddCallback (
            [in] ISubWalletCallback* subCallback);

        RemoveCallback (
            [in] ISubWalletCallback* subCallback);

        SendTransaction (
            [in] String fromAddress,
            [in] String toAddress,
            [in] Double amount,
            [in] Double fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* txid);

        GetTransactionsCount (
            [out] Int32 * count);

        GetAllTransaction (
            [in] Int32 start,
            [in] Int32 count,
            [in] String addressOrTxid,
            [out] String* transactionListJson);

        Sign (
            [in] String message,
            [in] String payPassword,
            [out] String* signature);

        CheckSign (
            [in] String publicKey,
            [in] String message,
            [in] String signature,
            [out] String* resultJson);
    }

    /**
     * extends ISubWallet
     */
    interface IMainchainSubWallet /*extends ISubWallet*/ {
        SendDepositTransaction(
            [in] String fromAddress,
            [in] String sidechainAccounts,
            [in] String sidechainAmounts,
            [in] Double fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* result);
    }

    /**
     * extends ISubWallet
     */
    interface ISidechainSubWallet /*extends ISubWallet*/ {
        SendWithdrawTransaction(
            [in] String fromAddress,
            [in] String mainchainAccounts,
            [in] String mainchainAmounts,
            [in] Double fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* result);
    }

    /**
     * extends ISubWallet
     */
    interface IDChainSubWallet /*extends ISubWallet*/ {
        GenerateId(
            [out] String* id,
            [out] String* privateKey,
            [out] String* reason);
    }

    interface IMasterWallet {
        CreateSubWallet (
            [in] String chainID,
            [in] Int32 coinTypeIndex,
            [in] String payPassword,
            [in] Boolean singleAddress,
            [in] Int64 feePerKb,
            [out] ISubWallet** wallet);

        RecoverSubWallet (
            [in] String chainID,
            [in] Int32 coinTypeIndex,
            [in] String payPassword,
            [in] Boolean singleAddress,
            [in] Int32 limitGap,
            [in] Int64 feePerKb,
            [out] ISubWallet** wallet);

        DestroyWallet (
            [in] ISubWallet* wallet);

        GetPublicKey (
            [out] String* publicKey);

        Sign (
            [in] String message,
            [in] String payPassword,
            [out] String* signature);

        CheckSign (
            [in] String publicKey,
            [in] String message,
            [in] String signature,
            [out] String* resultJson);
    }

    interface IWalletFactory {
        CreateMasterWallet (
            [in] String phrasePassword,
            [in] String payPassword,
            [out] IMasterWallet** masterWallet);

        DestroyWallet (
            [in] IMasterWallet* masterWallet);

        ImportWalletWithKeystore (
            [in] String keystorePath,
            [in] String backupPassword,
            [in] String payPassword,
            [out] IMasterWallet** masterWallet);

        ExportWalletWithKeystore (
            [in] IMasterWallet* masterWallet,
            [in] String backupPassword,
            [in] String keystorePath);

        ImportWalletWithMnemonic (
            [in] String mnemonic,
            [in] String phrasePassword,
            [in] String payPassword,
            [out] IMasterWallet** masterWallet);

        ExportWalletWithMnemonic (
            [in] IMasterWallet* masterWallet,
            [in] String payPassword,
            [out] String* mnemonic);
    }


    class CWalletFactory {
        constructor();

        interface IWalletFactory;
    }

    class CElaWallet {
        constructor();

        interface ISubWallet;
    }

    class CMasterWallet {
        constructor();

        interface IMasterWallet;
    }
}
