//=========================================================================
// Copyright (C) 2018 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary");


    interface ISubWalletCallback {
        OnTransactionStatusChanged (
            [in] String txid,
            [in] String status,
            [in] String desc,
            [in] Int32 confirms);
    }

    interface ISubWallet {
        GetChainId(
            [out] String* id);

        GetBalanceInfo (
            [out] String* balanceInfoJson);

        GetBalance (
            [out] Int64* balance);

        CreateAddress (
            [out] String* address);

        GetAllAddress (
            [in] Int32 start,
            [in] Int32 count,
            [out] String* addressesJson);

        GetBalanceWithAddress (
            [in] String address,
            [out] Int64* balance);

        AddCallback (
            [in] ISubWalletCallback* subCallback);

        RemoveCallback (
            [in] ISubWalletCallback* subCallback);

        SendTransaction (
            [in] String fromAddress,
            [in] String toAddress,
            [in] Int64 amount,
            [in] Int64 fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* txid);

        CreateMultiSignAddress (
            [in] String multiPublicKeyJson,
            [in] Int32 totalSignNum,
            [in] Int32 requiredSignNum,
            [out] String* multiSignAddress);

        GenerateMultiSignTransaction (
            [in] String fromAddress,
            [in] String toAddress,
            [in] Int64 amount,
            [in] Int64 fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* transactionJson);

        SendRawTransaction (
            [in] String transactionJson,
            [in] String signJson,
            [out] String* txid);

        GetAllTransaction (
            [in] Int32 start,
            [in] Int32 count,
            [in] String addressOrTxid,
            [out] String* transactionListJson);

        Sign (
            [in] String message,
            [in] String payPassword,
            [out] String* signature);

        CheckSign (
            [in] String address,
            [in] String message,
            [in] String signature,
            [out] String* resultJson);
    }

    /**
     * extends ISubWallet
     */
    interface IMainchainSubWallet /*extends ISubWallet*/ {
        SendDepositTransaction(
            [in] String fromAddress,
            [in] String toAddress,
            [in] Int64 amount,
            [in] String sidechainAccountsJson,
            [in] String sidechainAmountsJson,
            [in] String sidechainIndexsJson,
            [in] Int64 fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* result);
    }

    /**
     * extends ISubWallet
     */
    interface ISidechainSubWallet /*extends ISubWallet*/ {
        SendWithdrawTransaction(
            [in] String fromAddress,
            [in] String toAddress,
            [in] Int64 amount,
            [in] String mainchainAccountsJson,
            [in] String mainchainAmountsJson,
            [in] String mainchainIndexsJson,
            [in] Int64 fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* result);
    }

    /**
     * extends ISubWallet
     */
    interface IIdChainSubWallet /*extends ISubWallet*/ {
        SendIdTransaction(
            [in] String fromAddress,
            [in] String toAddress,
            [in] Int64 amount,
            [in] String payloadJson,
            [in] String programJson,
            [in] Int64 fee,
            [in] String payPassword,
            [in] String memo,
            [out] String* result);
    }

    enum SubWalletType{
        SubWalletType_Normal,
        SubWalletType_Mainchain,
        SubWalletType_Sidechain,
        SubWalletType_Idchain
    };

    interface IMasterWallet {
        GetId(
            [out] String* id);

        GetAllSubWallets(
            [out, callee] ArrayOf<ISubWallet*>* subWallets);

        CreateSubWallet(
            [in] String chainID,
            [in] String payPassword,
            [in] Boolean singleAddress,
            [in] Int64 feePerKb,
            [out] ISubWallet** subWallet);

        RecoverSubWallet(
            [in] String chainID,
            [in] String payPassword,
            [in] Boolean singleAddress,
            [in] Int32 limitGap,
            [in] Int64 feePerKb,
            [out] ISubWallet** subWallet);

        DestroyWallet(
            [in] ISubWallet *wallet);

        GetPublicKey(
            [out] String* publicKey);

        Sign(
            [in] String message,
            [in] String payPassword,
            [out] String* result);

        CheckSign(
            [in] String publicKey,
            [in] String message,
            [in] String signature,
            [out] String* resultJson);
    }

    interface IMasterWalletManager {
        CreateMasterWallet(
            [in] String masterWalletId,
            [in] String phrasePassword,
            [in] String payPassword,
            [in] String language,
            [out] IMasterWallet** masterWallet);

        GetAllMasterWallets(
            [out, callee] ArrayOf<IMasterWallet*>* wallets);

        RecoverMasterWallet(
            [in] String masterWalletId,
            [out] IMasterWallet** masterWallet);

        DestroyWallet(
            [in] IMasterWallet* masterWallet);

        ImportWalletWithKeystore(
            [in] String masterWalletId,
            [in] String keystorePath,
            [in] String backupPassword,
            [in] String payPassword,
            [in] String phrasePassword,
            [out] IMasterWallet** masterWallet);

        ImportWalletWithMnemonic(
            [in] String masterWalletId,
            [in] String mnemonic,
            [in] String phrasePassword,
            [in] String payPassword,
            [in] String language,
            [out] IMasterWallet** masterWallet);

        ExportWalletWithKeystore(
            [in] IMasterWallet* masterWallet,
            [in] String backupPassword,
            [in] String payPassword,
            [in] String keystorePath);

        ExportWalletWithMnemonic(
            [in] IMasterWallet *masterWallet,
            [in] String payPassword,
            [out] String* mnemonic);
    }


    interface IWalletEnviroment {
        InitializeRootPath(
            [in] String rootPath);

        GetRootPath(
            [out] String* path);

        GetMasterWalletManager(
            [out] IMasterWalletManager** walletMgr);
    }


    singleton class CWalletEnviroment {
        interface IWalletEnviroment;
    }
}
