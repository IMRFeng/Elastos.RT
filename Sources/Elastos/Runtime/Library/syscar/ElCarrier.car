//=========================================================================
// Copyright (C) 2018 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

/** @addtogroup CarrierAPI
  *   @{
  */

library
{
    //  const FAMILY_CORE = 0x10        // Carrier's error code.
    //  #define FRAMEWORK_ERROR(c)      MAKE_ECODE(SEVERITY_ERROR, FAMILY_FRAMEWORK, c)

    /**
     *
     * Error Code: The Carrier is not ready.
     */
    const E_CARRIER_NOT_READY                         = 0x81010000;
    const E_CARRIER_ERROR                             = 0x81010001;
    const E_INVITE                                    = 0x81010002;
    const E_CLOSE_PORT_FORWARDING                     = 0x81010003;
    const E_REMOVE_STREAM                             = 0x81010004;
    const E_INCORRECT_STATE                           = 0x81010005;

    /**
     *
     * the information of the friend
     *
     */
    interface IFriend {

        /**
        *
        * Get the friend's uid.
        *
        * @param
        *      uid [out] the friend's uid.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetUid(
            [out] String* uid);

        /**
        *
        * Get the friend's name.
        *
        * @param
        *      name [out] the friend's name.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetName(
            [out] String* name);

        /**
        *
        * Set the friend's label.
        *
        * @param
        *      label [in] the friend's label.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        SetLabel(
            [in] String label);

        /**
        *
        * Get the friend's label.
        *
        * @param
        *      label [out] the friend's label.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetLabel(
            [out] String* label);

        /**
        *
        * the status of a friend.
        *
        * @param
        *      online [out] the friend's status, TRUE: the friend is online; Otherwise, not online.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        IsOnline(
            [out] Boolean* online);
    }

    /**
     *
     * the Listeners about Carrier
     *
     */
    interface ICarrierListener {

        /**
        *
        * The carrier is idle, if the callback is invoked.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnIdle();

        /**
        *
        * the status of carrier.
        *
        * @param
        *      online [in] the carrier's status: TRUE--the carrier is online; Otherwise, not online.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnConnectionChanged(
            [in] Boolean online);

        /**
        *
        * the carrier is ready, if the callback is invoked.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnReady();

        /**
        *
        * If the other one adds you as a friend, the carrier will be invoked this callback.
        *
        * @param
        *      uid [in] the other's uid.
        *
        * @param
        *      hello [in] check information sent by the other one.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnFriendRequest(
            [in] String uid,
            [in] String hello);

        /**
        *
        * If a friend is online, the carrier will be invoked this callback.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      online [in] the friend's status, TRUE: online; Otherwise, not online.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnFriendConnectionChanged(
            [in] String uid,
            [in] Boolean online);

        /**
        *
        * Used to show the user port forwarding request.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      servicePort [in] the port request to use by the active participant.
        *
        * @param
        *      accept [out] The decision: TRUE if accepts, FALSE if refuses.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnPortForwardingRequest(
            [in] String uid,
            [in] String servicePort,
            [out] Boolean* accept);

        /**
        *
        * Used to show the user port fowarding result.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      localPort [in] one port used by the active participant.
        *
        * @param
        *      remotePort [in] the other port used by the passive participant.
        *
        * @param
        *      code [in] The result: zero, successful; non-zero, unsuccessful.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnPortForwardingResult(
            [in] String uid,
            [in] String localPort,
            [in] String remotePort,
            [in] ECode code);

        /**
        *
        * If received message from friend, the carrier will be invoked this callback.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      message [in] the message from friend.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OnMessageReceived(
            [in] String uid,
            [in] ArrayOf<Byte> message);
    }

    interface ICarrier {

        /**
        *
        * Start the carrier.
        *
        * @param
        *      carrierDataPath [in] the carrier's data path which will store your friends' information.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Start(
            [in] String carrierDataPath);

        /**
        *
        * Stop the carrier.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Stop();

        /**
        *
        * Regenerate the carrier's address. After this method, you can call the method GetAddress to get a new address.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        RegenerateAddress();

        /**
        *
        * Get your carrier's address. Generally, the other one must get your address, if wants to add you as a friend.
        *
        * @param
        *      myAddress [in] your carrier's address.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetAddress(
            [out] String* myAddress);

        /**
        *
        * Accept a friend request.
        *
        * @param
        *      uid [in] the other one's uid.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        AccpetFriendRequest(
            [in] String uid);

        /**
        *
        * Add a friend
        *
        * @param
        *      friendAddress [in] the other one's address.
        *
        * @param
        *      hello [in] check information that you want to be showed.
        *
        * @param
        *      friendId [out] The user ID corresponding to the address.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        AddFriend(
            [in] String friendAddress,
            [in] String hello,
            [out] String* friendId);

        /**
        *
        * Remove a friend
        *
        * @param
        *      _friend [in] the one will be removed.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        RemoveFriend(
            [in] IFriend* _friend);

        /**
        *
        * Check the status about the carrier.
        *
        * @param
        *      online [in] the carrier's current status.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        IsOnline(
            [out] Boolean* online);

        /**
        *
        * Get the information of a friend.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      _friend [out] the friend's information interface.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding macro.
        */
        GetFriend(
            [in] String uid,
            [out] IFriend** _friend);

        /**
        *
        * Get your all friends.
        *
        * @param
        *      friends [in] the array which incldes your all friends.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetFriends(
            [out, callee] ArrayOf<IFriend*>* friends);

        /**
        *
        * Add your carrier listener. The listener indicates some carrier's operations.
        *
        * @param
        *      listener [in] your local ICarrierListener's object.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        AddCarrierNodeListener(
            [in] ICarrierListener* listener);

        /**
        *
        * Remove your carrier listener
        *
        * @param
        *      listener [in] your local ICarrierListener's object.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        RemoveCarrierNodeListener(
            [in] ICarrierListener* listener);

        /**
        *
        * Import your carrier' data file with an absolute path
        *
        * @param
        *      dataFile [in] your local carrier data file.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Import(
            [in] String dataFile);

        /**
        *
        * Export your carrier' data file with an absolute path
        *
        * @param
        *      dataFile [in] the carrier's data file witch comes from external file.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Export(
            [out] String* dataFile);

        /**
        *
        * Get your carrier's userid.
        *
        * @param
        *      myUid [in] your carrier's userid.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetUserid(
            [out] String* myUid);

        /**
        *
        * Open a port forwarding.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      localPort [in] one port used by the active participant.
        *
        * @param
        *      remotePort [in] the other port used by the passive participant.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        OpenPortForwarding(
            [in] String uid,
            [in] String localPort,
            [in] String remotePort);

        /**
        *
        * Close a port forwarding.
        *
        * @param
        *      uid [in] the friend's uid.
        *
        * @param
        *      localPort [in] one port used by the active participant.
        *
        * @param
        *      remotePort [in] the other port used by the passive participant.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        ClosePortForwarding(
            [in] String uid,
            [in] String localPort,
            [in] String remotePort);

        /**
        *
        * Send message to friend.
        *
        * @param
        *      uid [in] the friend's userid.
        *
        * @param
        *      message [in] message send to friend.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        SendMessage(
            [in] String uid,
            [in] ArrayOf<Byte> message);
    }
}

/** @} */
